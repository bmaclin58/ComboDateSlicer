{"version":3,"file":"visual.js","mappings":"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,CAAC;CACJ;;;;;;;;;;;;;;;;;;ACzRD;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;;ACnT2E;AACpE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kFAAa;AACjD;AACA,4DAA4D,+EAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+EAAU;AAC3D;AACA,iCAAiC,gBAAgB;AACjD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wGAAwG;AAC7J;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oGAAoG;AACrJ;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,kDAAkD;AAC9E;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kFAAa;AACzC;AACA,oDAAoD,+EAAU;AAC9D,6BAA6B,gBAAgB;AAC7C,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;;;AC/LqE;AACD;AACX;AACzD;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCrCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,qDAAqD,GAAkB;IACvE,IAAI,EAAE,uDAAuD;IAC7D,WAAW,EAAE,iBAAiB;IAC9B,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAkC,EAAE,EAAE;QAC3C,IAAI,wDAAM,EAAE;YACR,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAS,UAAW,CAAC,cAAc,CAAC;QACxD,IAAI,QAAQ,IAAI,cAAc,EAAE;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,uDAAuD,CAAC,GAAG,qDAAqD,CAAC;CAC5I;AACD,iEAAe,qDAAqD,EAAC","sources":["webpack:///./src/settings.ts","webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\r\n\r\nimport FormattingSettingsCard = formattingSettings.SimpleCard;\r\nimport FormattingSettingsSlice = formattingSettings.Slice;\r\nimport FormattingSettingsModel = formattingSettings.Model;\r\n\r\nexport class dateFormattingCard extends FormattingSettingsCard{\r\n\r\n/**\r\n * Date Formatting Card\r\n */\r\n    public fontFamily = new formattingSettings.FontPicker({\r\n        name: \"fontFamily\",\r\n        displayName: \"Date Font Family\",\r\n        value: \"Arial\",\r\n        visible: true\r\n    });\r\n\r\n    public fontSize = new formattingSettings.NumUpDown({ \r\n        name: \"fontSize\",\r\n        displayName: \"Date Font Size\",\r\n        value: 18,\r\n        visible: true\r\n    });    \r\n        \r\n    public fontColor = new formattingSettings.ColorPicker({\r\n        name: \"fontColor\",\r\n        displayName: \"Date Font Color\",\r\n        value: { value: \"#000000\" },\r\n        visible: true\r\n    });\r\n\r\n    public backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Date Background Color\",\r\n        value: { value: \"#FFFFFF\" },\r\n        visible: true\r\n    });\r\n\r\n    public name: string = \"dateFormatting\";\r\n    public displayName: string = \"Date Formatting\";\r\n    public visible: boolean = true;\r\n    public slices:  FormattingSettingsSlice[] = [\r\n      this.fontSize, \r\n      this.fontFamily, \r\n      this.fontColor,\r\n      this.backgroundColor\r\n    ];\r\n\r\n}\r\n/**\r\n * Relative Date Formatting Card\r\n */\r\n\r\nexport class relativeDateFormattingCardSettings extends FormattingSettingsCard{\r\n\r\n    /**\r\n     * Text Formatting Card\r\n     */\r\n        public fontFamily = new formattingSettings.FontPicker({\r\n            name: \"fontFamily\",\r\n            displayName: \"Date Font Family\",\r\n            value: \"Arial\",\r\n            visible: true\r\n        });\r\n    \r\n        public fontSize = new formattingSettings.NumUpDown({ \r\n            name: \"fontSize\",\r\n            displayName: \"Date Font Size\",\r\n            value: 16,\r\n            visible: true\r\n        });    \r\n            \r\n        public fontColor = new formattingSettings.ColorPicker({\r\n            name: \"fontColor\",\r\n            displayName: \"Date Font Color\",\r\n            value: { value: \"#000000\" },\r\n            visible: true\r\n        });\r\n    \r\n        public backgroundColor = new formattingSettings.ColorPicker({\r\n            name: \"backgroundColor\",\r\n            displayName: \"Background Color\",\r\n            value: { value: \"#FFFFFF\" },\r\n            visible: true\r\n        });\r\n    \r\n        public name: string = \"relativeDateFormatting\";\r\n        public displayName: string = \"Relative Date Formatting\";\r\n        public visible: boolean = true;\r\n        public slices:  FormattingSettingsSlice[] = [\r\n          this.fontSize, \r\n          this.fontFamily, \r\n          this.fontColor,\r\n          this.backgroundColor\r\n        ];\r\n    \r\n    \r\n    }\r\n\r\n/**\r\n * Background Formatting Card\r\n */\r\nexport class backgroundFormattingCard extends FormattingSettingsCard {\r\n    backgroundColor = new formattingSettings.ColorPicker({\r\n        name: \"backgroundColor\",\r\n        displayName: \"Background Color\",\r\n        value: { value: \"#FFFFFF\" }\r\n    });\r\n\r\n    transparency = new formattingSettings.NumUpDown({\r\n        name: \"Transparency\",\r\n        displayName: \"Transparency\",\r\n        value: 0\r\n    });\r\n\r\n    public name: string = \"backgroundFormatting\";\r\n    public displayName: string = \"Background Formatting\";\r\n    public visible: boolean = true;\r\n    public slices:  FormattingSettingsSlice[] = [this.backgroundColor, this.transparency];\r\n}\r\n\r\n/**\r\n* Visual settings model class\r\n*\r\n*/\r\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\r\n    // Create formatting settings model formatting cards\r\n    public backgroundFormatting: backgroundFormattingCard = new backgroundFormattingCard();\r\n    public dateFormatting: dateFormattingCard = new dateFormattingCard();\r\n    public relativeDateFormatting: relativeDateFormattingCardSettings = new relativeDateFormattingCardSettings();\r\n\r\n    public cards  = [\r\n        this.backgroundFormatting,\r\n        this.dateFormatting,\r\n        this.relativeDateFormatting  \r\n      ];\r\n}\r\n\r\n","/*\r\n*  Power BI Visual CLI\r\n*\r\n*  Copyright (c) Microsoft Corporation\r\n*  All rights reserved.\r\n*  MIT License\r\n*\r\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n*  in the Software without restriction, including without limitation the rights\r\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n*  copies of the Software, and to permit persons to whom the Software is\r\n*  furnished to do so, subject to the following conditions:\r\n*\r\n*  The above copyright notice and this permission notice shall be included in\r\n*  all copies or substantial portions of the Software.\r\n*\r\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n*  THE SOFTWARE.\r\n*/\r\n\"use strict\";\r\n\r\nimport powerbi from \"powerbi-visuals-api\";\r\nimport IVisual = powerbi.extensibility.visual.IVisual;\r\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\r\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\r\n//import DataView = powerbi.DataView;\r\n//import * as models from \"powerbi-models\";\r\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\r\n\r\n\r\nimport { VisualFormattingSettingsModel } from \"./settings\";\r\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\r\n//import { interactivitySelectionService } from \"powerbi-visuals-utils-interactivityutils\";\r\n\r\nimport \"./../style/visual.less\";\r\n\r\nexport class Visual implements IVisual {\r\n    public target: HTMLElement;\r\n    public startDateInput: HTMLInputElement;\r\n    public endDateInput: HTMLInputElement;\r\n    public relativeDateSelect: HTMLSelectElement;\r\n\r\n    public slicerContainer: HTMLElement;\r\n    public host: IVisualHost;\r\n\r\n    public formattingSettings: VisualFormattingSettingsModel;\r\n    public formattingSettingsService: FormattingSettingsService;\r\n\r\n    private tableName: string;\r\n    private columnName: string;\r\n\r\n    //public dateInputs : HTMLInputElement;\r\n\r\n    constructor(options: VisualConstructorOptions) {\r\n        this.target = options.element;\r\n        this.host = options.host;\r\n\r\n        this.formattingSettingsService = new FormattingSettingsService();\r\n        this.formattingSettings = new VisualFormattingSettingsModel();\r\n\r\n\r\n\r\n        this.target.innerHTML = `\r\n            <div id=\"slicer-container\">\r\n                <div id=\"date-inputs\">\r\n                    <input type=\"date\" id=\"startDate\" />\r\n                    <input type=\"date\" id=\"endDate\" />\r\n                </div>\r\n                <select id=\"relativeDate\">\r\n                    <option value=\"thisWeek\">This Week</option>\r\n                    <option value=\"last7Days\">Last 7 Days</option>\r\n                    <option value=\"thisMonth\">This Month</option>\r\n                    <option value=\"last30Days\">Last 30 Days</option>\r\n                    <option value=\"thisYear\">This Year</option>\r\n                    <option value=\"last365Days\">Last 365 Days</option>\r\n                </select>\r\n            </div>\r\n        `;\r\n\r\n        //this.dateInputs = document.getElementById(\"date-inputs\") as HTMLInputElement;\r\n        this.startDateInput = document.getElementById(\"startDate\") as HTMLInputElement;\r\n        this.endDateInput = document.getElementById(\"endDate\") as HTMLInputElement;\r\n        this.relativeDateSelect = document.getElementById(\"relativeDate\") as HTMLSelectElement;\r\n        \r\n\r\n        this.startDateInput.addEventListener(\"change\", this.updateDateRange.bind(this));\r\n        this.endDateInput.addEventListener(\"change\", this.updateDateRange.bind(this));\r\n        this.relativeDateSelect.addEventListener(\"change\", this.updateRelativeDate.bind(this));\r\n\r\n        \r\n        // Add an event listener for slicer changes\r\n        this.startDateInput.addEventListener(\"change\", () => this.onSlicerChange());\r\n        this.endDateInput.addEventListener(\"change\", () => this.onSlicerChange());\r\n        this.relativeDateSelect.addEventListener(\"change\", () => this.updateRelativeDate());\r\n\r\n\r\n    }\r\n\r\n    public update(options: VisualUpdateOptions) {\r\n        if (!options || !options.dataViews || options.dataViews.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const dataView = options.dataViews[0];\r\n        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, dataView);\r\n\r\n        const categories = dataView.categorical.categories[0];\r\n\r\n        if (categories && categories.values && categories.values.length > 0) {\r\n            const dateValues = categories.values\r\n                .map(value => new Date(value as string))\r\n                .filter(date => !isNaN(date.getTime()));\r\n\r\n            if (dateValues.length > 0) {\r\n                const dateTimestamps = dateValues.map(value => value.getTime());\r\n                const minDate = new Date(Math.min(...dateTimestamps));\r\n                const maxDate = new Date(Math.max(...dateTimestamps));\r\n\r\n                this.startDateInput.value = minDate.toISOString().split('T')[0];\r\n                this.endDateInput.value = maxDate.toISOString().split('T')[0];\r\n            } else {\r\n                this.setDefaultDates();\r\n            }\r\n        } else {\r\n            this.setDefaultDates();\r\n        }\r\n\r\n        this.updateStyles();\r\n    }\r\n\r\n    public getFormattingModel(): powerbi.visuals.FormattingModel {\r\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\r\n    }\r\n\r\n    private updateDateRange() {\r\n        const startDate = new Date(this.startDateInput.value);\r\n        const endDate = new Date(this.endDateInput.value);\r\n\r\n        if (endDate < startDate) {\r\n            this.endDateInput.value = this.startDateInput.value;\r\n        }\r\n\r\n        console.log(`Date Range: ${this.startDateInput.value} - ${this.endDateInput.value}`);\r\n    }\r\n\r\n    private updateRelativeDate() {\r\n        const relativeDate = this.relativeDateSelect.value;\r\n        const today = new Date();\r\n        let startDate;\r\n\r\n        switch (relativeDate) {\r\n            case \"thisWeek\":\r\n                startDate = new Date(today);\r\n                startDate.setDate(today.getDate() - today.getDay() + 1);\r\n                break;\r\n            case \"last7Days\":\r\n                startDate = new Date(today);\r\n                startDate.setDate(today.getDate() - 7);\r\n                break;\r\n            case \"thisMonth\":\r\n                startDate = new Date(today.getFullYear(), today.getMonth(), 1);\r\n                break;\r\n            case \"last30Days\":\r\n                startDate = new Date(today);\r\n                startDate.setDate(today.getDate() - 30);\r\n                break;\r\n            case \"thisYear\":\r\n                startDate = new Date(today.getFullYear(), 0, 1);\r\n                break;\r\n            case \"last365Days\":\r\n                startDate = new Date(today);\r\n                startDate.setDate(today.getDate() - 365);\r\n                break;\r\n            default:\r\n                startDate = new Date(today);\r\n        }\r\n\r\n        this.startDateInput.value = startDate.toISOString().split('T')[0];\r\n        this.endDateInput.value = today.toISOString().split('T')[0];\r\n        \r\n        this.updateDateRange();\r\n        //this.onSlicerChange();\r\n    }\r\n\r\n    private setDefaultDates() {\r\n        const today = new Date();\r\n        this.startDateInput.value = today.toISOString().split('T')[0];\r\n        this.endDateInput.value = today.toISOString().split('T')[0];\r\n    }\r\n\r\n    private updateStyles() {\r\n        const slicerContainer = document.getElementById(\"slicer-container\");\r\n\r\n        // Start date input formatting\r\n        const dateFontSize = `${this.formattingSettings.dateFormatting.fontSize.value}px`;\r\n        const dateFontFamily = this.formattingSettings.dateFormatting.fontFamily.value;\r\n        const dateColor = this.formattingSettings.dateFormatting.fontColor.value.value;\r\n        const dateBackgroundColor = this.formattingSettings.dateFormatting.backgroundColor.value.value;\r\n\r\n        if (dateColor) {\r\n            this.startDateInput.style.color = dateColor;\r\n            this.endDateInput.style.color = dateColor;\r\n         \r\n        }\r\n        if (dateFontSize) {\r\n            this.startDateInput.style.fontSize = dateFontSize;\r\n            this.endDateInput.style.fontSize = dateFontSize;\r\n        }\r\n        if (dateFontFamily) {\r\n            this.startDateInput.style.fontFamily = dateFontFamily;\r\n            this.endDateInput.style.fontFamily = dateFontFamily;\r\n        }\r\n        if (dateBackgroundColor) {\r\n            this.startDateInput.style.backgroundColor = dateBackgroundColor;\r\n            this.endDateInput.style.backgroundColor = dateBackgroundColor;\r\n        }\r\n\r\n        // Relative date select formatting\r\n        const relativeDateFontSize = `${this.formattingSettings.relativeDateFormatting.fontSize.value}px`;\r\n        const relativeDateFontFamily = this.formattingSettings.relativeDateFormatting.fontFamily.value;\r\n        const relativeDateColor = this.formattingSettings.relativeDateFormatting.fontColor.value.value;\r\n        const relativeDateBackgroundColor = this.formattingSettings.relativeDateFormatting.backgroundColor.value.value;\r\n\r\n        if (relativeDateColor) {\r\n            this.relativeDateSelect.style.color = relativeDateColor;\r\n        }\r\n        if (relativeDateFontSize) {\r\n            this.relativeDateSelect.style.fontSize = relativeDateFontSize;\r\n        }\r\n        if (relativeDateFontFamily) {\r\n            this.relativeDateSelect.style.fontFamily = relativeDateFontFamily;\r\n        }\r\n        if (relativeDateBackgroundColor) {\r\n            this.relativeDateSelect.style.backgroundColor = relativeDateBackgroundColor;\r\n        }\r\n\r\n        // Container background color\r\n        const backgroundColor = this.formattingSettings.backgroundFormatting.backgroundColor.value.value;\r\n        if (backgroundColor) {\r\n            slicerContainer.style.backgroundColor = backgroundColor;\r\n        }\r\n    }\r\n\r\n    private onSlicerChange() {\r\n        const startDate = this.startDateInput.value;\r\n        const endDate = this.endDateInput.value;\r\n\r\n        if (!startDate || !endDate) {\r\n            return;\r\n        }\r\n\r\n        const startFilter = {\r\n            $schema: \"https://powerbi.com/product/schema#basic\",\r\n            target: {\r\n                table: \"YourTableName\",\r\n                column: \"YourColumnName\"\r\n            },\r\n            operator: \"ge\",\r\n            values: [startDate]\r\n        };\r\n\r\n        const endFilter = {\r\n            $schema: \"https://powerbi.com/product/schema#basic\",\r\n            target: {\r\n                table: \"YourTableName\",\r\n                column: \"YourColumnName\"\r\n            },\r\n            operator: \"le\",\r\n            values: [endDate]\r\n        };\r\n\r\n        // Apply the filters\r\n        this.host.applyJsonFilter(startFilter, \"general\", \"filter\", powerbi.FilterAction.merge);\r\n        this.host.applyJsonFilter(endFilter, \"general\", \"filter\", powerbi.FilterAction.merge);\r\n    }\r\n}","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class CardGroupEntity extends NamedEntity {\n}\nexport class Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nexport class CompositeCard extends NamedEntity {\n}\nexport class Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nexport class SimpleCard extends CardGroupEntity {\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        let newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","import { CompositeCard, SimpleCard } from \"./FormattingSettingsComponents\";\nexport class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        let defaultSettings = new typeClass();\n        let dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof CompositeCard)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof SimpleCard ? [card] : card.groups);\n                cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        let formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            let formattingCard = {\n                displayName: (this.localizationManager && card.displayNameKey) ? this.localizationManager.getDisplayName(card.displayNameKey) : card.displayName,\n                description: (this.localizationManager && card.descriptionKey) ? this.localizationManager.getDisplayName(card.descriptionKey) : card.description,\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            if (card.topLevelSlice) {\n                let topLevelToggleSlice = card.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                topLevelToggleSlice.suppressDisplayName = true;\n                formattingCard.topLevelToggle = topLevelToggleSlice;\n            }\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof SimpleCard;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances\n                .forEach((cardGroupInstance) => {\n                const groupUid = cardGroupInstance.name + \"-group\";\n                // Build formatting group for each group\n                const formattingGroup = {\n                    displayName: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.displayNameKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.displayNameKey) : cardGroupInstance.displayName,\n                    description: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.descriptionKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.descriptionKey) : cardGroupInstance.description,\n                    slices: [],\n                    uid: groupUid,\n                    collapsible: cardGroupInstance.collapsible,\n                    delaySaveSlices: cardGroupInstance.delaySaveSlices,\n                    disabled: cardGroupInstance.disabled,\n                    disabledReason: cardGroupInstance.disabledReason,\n                };\n                formattingCard.groups.push(formattingGroup);\n                // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n                // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n                // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n                const sliceNames = {};\n                // Build formatting container slice for each property\n                if (cardGroupInstance.container) {\n                    const container = cardGroupInstance.container;\n                    const containerUid = groupUid + \"-container\";\n                    const formattingContainer = {\n                        displayName: (this.localizationManager && container.displayNameKey)\n                            ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                        description: (this.localizationManager && container.descriptionKey)\n                            ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                        containerItems: [],\n                        uid: containerUid\n                    };\n                    container.containerItems.forEach((containerItem) => {\n                        // Build formatting container item object\n                        const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                        const containerItemUid = containerUid + containerIemName;\n                        let formattingContainerItem = {\n                            displayName: (this.localizationManager && containerItem.displayNameKey)\n                                ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                            slices: [],\n                            uid: containerItemUid\n                        };\n                        // Build formatting slices and add them to current formatting container item\n                        this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n                        formattingContainer.containerItems.push(formattingContainerItem);\n                    });\n                    formattingGroup.container = formattingContainer;\n                }\n                if (cardGroupInstance.slices) {\n                    if (cardGroupInstance.topLevelSlice) {\n                        let topLevelToggleSlice = cardGroupInstance.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                        topLevelToggleSlice.suppressDisplayName = true;\n                        (formattingGroup.displayName == undefined ? formattingCard : formattingGroup).topLevelToggle = topLevelToggleSlice;\n                    }\n                    // Build formatting slice for each property\n                    this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n                }\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            let formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        let revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        if (card instanceof CompositeCard && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof SimpleCard ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","import * as formattingSettings from \"./FormattingSettingsComponents\";\nimport FormattingSettingsService from \"./FormattingSettingsService\";\nexport { formattingSettings, FormattingSettingsService };\n//# sourceMappingURL=index.js.map","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if (slice === null || slice === void 0 ? void 0 : slice.items) {\n        let itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar comboDateSlicer821CCC76721D44A48063DFEA0FA72849_DEBUG: IVisualPlugin = {\n    name: 'comboDateSlicer821CCC76721D44A48063DFEA0FA72849_DEBUG',\n    displayName: 'ComboDateSlicer',\n    class: 'Visual',\n    apiVersion: '5.3.0',\n    create: (options?: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = (<any>globalThis).dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"comboDateSlicer821CCC76721D44A48063DFEA0FA72849_DEBUG\"] = comboDateSlicer821CCC76721D44A48063DFEA0FA72849_DEBUG;\n}\nexport default comboDateSlicer821CCC76721D44A48063DFEA0FA72849_DEBUG;"],"names":[],"sourceRoot":""}